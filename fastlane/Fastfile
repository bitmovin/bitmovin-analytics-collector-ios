Dir[File.dirname(__FILE__) + '/lanes/*'].each { |file| import file }
Dir[File.dirname(__FILE__) + '/helper/*.rb'].each { |file| require file }

default_platform(:ios)

skip_docs

platform :ios do
  before_all do
    is_github_actions = ENV["GITHUB_ACTIONS"] || false

    if is_github_actions
      ENV["PCI_BRANCH"] = sh(%{git describe --exact-match --tags HEAD || echo "#{ENV["GITHUB_REF_NAME"] || ""}"}).strip
      ENV["CI_BUILD_NUM"] = ENV.fetch("GITHUB_RUN_ID")
    end

    ENV["GIT_VERSION"] = sh('git describe --tags --abbrev=0 || echo ""').strip
  end

  desc "build release for specific platform"
  private_lane :build_release_specific_platform do |options|
    scheme = options[:scheme]
    archive_path = "#{options[:output_dir]}/#{scheme}-#{options[:sdk]}.xcarchive"
    UI.header "Building #{scheme} for #{options[:sdk]}"

    xcodebuild(
      scheme: scheme,
      workspace: "BitmovinAnalyticsCollector.xcworkspace",
      clean: !is_ci,
      archive: true,
      archive_path: archive_path,
      xcargs: "-sdk #{options[:sdk]} -configuration Release SKIP_INSTALL=NO"
    )

    dsym_path = "#{archive_path}/dSYMs/#{scheme}.framework.dSYM"
    bcsymbolmap_path = %x[find #{archive_path}/BCSymbolMaps -type f -name *.bcsymbolmap 2> /dev/null || echo ""].strip

    {
        framework: "#{archive_path}/Products/Library/Frameworks/#{scheme}.framework",
        dsyms: dsym_path,
        bcsymbolmap: bcsymbolmap_path
    }
  end

  desc "release build tvOS and iOS"
  lane :build_release_product do |options|
    scheme = options[:scheme]
    supports_tvos = options[:supports_tvos]
    output_dir = "#{DirectoryHelper.project_root}/Output/#{scheme}"

    is_github_actions = ENV["GITHUB_ACTIONS"] || false
    if is_github_actions
      unlock_keychain(
        path: "~/Library/Keychains/login.keychain-db",
        password: ENV["KEYCHAIN_LOGIN_PASSWORD"],
        set_default: true
      )
    end

    FileUtils.remove_dir(output_dir, true)
    FileUtils.mkdir_p(output_dir)

    iOS_device_archive_info = build_release_specific_platform(
      output_dir: output_dir,
      scheme: scheme,
      sdk: "iphoneos"
    )
    iOS_simulator_archive_info = build_release_specific_platform(
      output_dir: output_dir,
      scheme: scheme,
      sdk: "iphonesimulator"
    )

    if supports_tvos
      tvOS_device_archive_info = build_release_specific_platform(
        output_dir: output_dir,
        scheme: scheme,
        sdk: "appletvos"
      )
      tvOS_simulator_archive_info = build_release_specific_platform(
        output_dir: output_dir,
        scheme: scheme,
        sdk: "appletvsimulator"
      )
    end

    def transform_to_options(archive_info)
      options = %{-framework #{archive_info[:framework]} -debug-symbols #{archive_info[:dsyms]}}
      options << " -debug-symbols #{archive_info[:bcsymbolmap]}" unless archive_info[:bcsymbolmap].empty?
      options
    end

    xcframework_command = "xcodebuild -create-xcframework \
      #{transform_to_options(iOS_device_archive_info)} \
      #{transform_to_options(iOS_simulator_archive_info)}"

    xcframework_command << " #{transform_to_options(tvOS_device_archive_info)}" if supports_tvos
    xcframework_command << " #{transform_to_options(tvOS_simulator_archive_info)}" if supports_tvos

    xcframework_command << " -output #{output_dir}/#{scheme}.xcframework"

    sh(xcframework_command)
  end

  desc "create zip out of individual xcframework"
  lane :create_release_xcframework_zip do |options|
    product_name = options[:product_name]
    product_path = "#{DirectoryHelper.project_root}/Output/#{product_name}/#{product_name}.xcframework"
    release_dir = "#{DirectoryHelper.project_root}/Release"

    FileUtils.mkdir_p(release_dir)
    Dir.chdir(release_dir) do
      FileUtils.remove_dir('temp', true)
      Dir.mkdir('temp')
      Dir.chdir('temp') do
        FileUtils.cp("#{DirectoryHelper.project_root}/podspec/BitmovinAnalyticsCollector.LICENSE.md", 'LICENSE.md')
        FileUtils.cp_r(product_path, '.')
        sh("zip -r #{release_dir}/#{product_name}.zip . -x '**/.DS_Store'")
      end
      FileUtils.remove_dir('temp', true)
    end
  end

  desc "create zip out of all xcframeworks"
  lane :create_release_umbrella_xcframework_zip do |options|
    product_path = "#{DirectoryHelper.project_root}/Output/*/*.xcframework"

    release_dir = "#{DirectoryHelper.project_root}/Release"
    FileUtils.mkdir_p(release_dir)
    Dir.chdir(release_dir) do
      Dir.mkdir('temp')
      Dir.chdir('temp') do
        FileUtils.cp("#{DirectoryHelper.project_root}/podspec/BitmovinAnalyticsCollector.LICENSE.md", 'LICENSE.md')
        sh("cp -R #{product_path} .")
        sh("zip -r #{release_dir}/BitmovinAnalyticsCollector.zip . -x '**/.DS_Store'")
      end
      FileUtils.remove_dir('temp', true)
    end
  end

  desc "push individual xcframework zip"
  lane :push_xcframework do |options|
    release_version = ENV.fetch("GIT_VERSION")
    product_name = options[:product_name]
    release_dir = "#{DirectoryHelper.project_root}/Release"

    gcs_key_path="#{release_dir}/gcs.json"
    Dir.chdir("..") do
      File.write(gcs_key_path, ENV.fetch("GC_SACCOUNT")) unless File.exists?(gcs_key_path)
    end

    bucket_path = "analytics/ios_tvos/#{release_version}/#{product_name}.zip"
    google_cloud_storage_upload(
      project: "bitmovincloud",
      keyfile: gcs_key_path,
      content_path: "#{release_dir}/#{product_name}.zip",
      bucket: "cloudflare-cdn-origin-bucket",
      name: bucket_path
    )
  end

  desc "push umbrella xcframework zip"
  lane :push_umbrella_xcframework do |options|
    release_version = ENV.fetch("GIT_VERSION")
    release_dir = "#{DirectoryHelper.project_root}/Release"

    gcs_key_path="#{release_dir}/gcs.json"
    Dir.chdir("..") do
      File.write(gcs_key_path, ENV.fetch("GC_SACCOUNT")) unless File.exists?(gcs_key_path)
    end

    bucket_path = "analytics/ios_tvos/#{release_version}/BitmovinAnalyticsCollector.zip"
    google_cloud_storage_upload(
      project: "bitmovincloud",
      keyfile: gcs_key_path,
      content_path: "#{release_dir}/BitmovinAnalyticsCollector.zip",
      bucket: "cloudflare-cdn-origin-bucket",
      name: bucket_path
    )
  end

  desc "build all release packages"
  lane :build_release_binaries do
    FileUtils.remove_dir("#{DirectoryHelper.project_root}/Output", true)
    FileUtils.remove_dir("#{DirectoryHelper.project_root}/Release", true)

    schemes = {
      "CoreCollector" => true,
      "BitmovinPlayerCollector" => true,
      "AVPlayerCollector" => true,
      "AmazonIVSPlayerCollector" => false,
    }

    # keep this separate to ensure all can be built successfully
    schemes.each do |scheme, supports_tvos|
      build_release_product(
        scheme: scheme,
        supports_tvos: supports_tvos
      )
      create_release_xcframework_zip(
        product_name: scheme
      )
    end
    
    create_release_umbrella_xcframework_zip

    schemes.each do |scheme, _|
      push_xcframework(
        product_name: scheme
      )
    end
    
    push_umbrella_xcframework
  end

  desc "push release cocoapod"
  lane :push_cocoapods do |options|
    release_version = ENV.fetch("GIT_VERSION")
    release_dir = "#{DirectoryHelper.project_root}/Release"

    bucket_path = "analytics/ios_tvos/#{release_version}/BitmovinAnalyticsCollector.zip"

    spec = read_podspec(path: "podspec/BitmovinAnalyticsCollector.podspec")
    spec_output_path = "#{release_dir}/BitmovinAnalyticsCollector.podspec.json"

    spec["version"] = release_version
    spec["source"]["http"] = "https://cdn.bitmovin.com/#{bucket_path}"

    cocoapod_deploy_key_path="#{release_dir}/cocoapod-deploy.id_rsa"
    Dir.chdir("..") do
      unless File.exists?(cocoapod_deploy_key_path)
        File.write(cocoapod_deploy_key_path, "-----BEGIN OPENSSH PRIVATE KEY-----\n") #Keys need to be created with macbook
        File.write(cocoapod_deploy_key_path, options[:COCOA_DEPLOY_KEY], mode: "a")
        File.write(cocoapod_deploy_key_path, "\n-----END OPENSSH PRIVATE KEY-----\n", mode: "a") #Keys need to be created with macbook
      end
    end

    Dir.chdir("..") do
      File.write(spec_output_path, JSON.pretty_generate(spec))
      sh("ssh-agent", "sh", "-c",
        "chmod 0600 #{cocoapod_deploy_key_path};"\
        "ssh-add #{cocoapod_deploy_key_path};"\
        "git config --global user.name 'Bitmovin Release Automation';"\
        "git config --global user.email support@bitmovin.com;"\
        "bundle exec pod repo add bm-#{options[:COCOA_DEPLOY_REPO]} git@github.com:bitmovin/#{options[:COCOA_DEPLOY_REPO]}.git || bundle exec pod repo update bm-#{options[:COCOA_DEPLOY_REPO]};"\
        "bundle exec pod repo push bm-#{options[:COCOA_DEPLOY_REPO]} #{spec_output_path}")
    end
  end

  lane :test_collector do |options|
    scan(
      scheme: options[:scheme],
      workspace: "BitmovinAnalyticsCollector.xcworkspace",
      sdk: "iphoneos",
      clean: true,
      result_bundle: true,
      output_types: '',
      output_directory: "./fastlane/test_output/xctest",
      destination: "name=iPhone 14 Pro"
    )
  end

  lane :build_debug_app do
    xcodebuild(
      configuration: "Debug",
      scheme: "CollectorDemoApp",
      workspace: "BitmovinAnalyticsCollector.xcworkspace",
      xcargs: "CODE_SIGNING_ALLOWED='NO'",
      sdk: "iphoneos"
    )
  end

  lane :build_tvos_debug_app do
    xcodebuild(
      configuration: "Debug",
      scheme: "CollectorDemoAppTV",
      workspace: "BitmovinAnalyticsCollector.xcworkspace",
      xcargs: "CODE_SIGNING_ALLOWED='NO'",
      destination: "generic/platform=tvOS"
    )
  end
end
