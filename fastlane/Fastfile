desc "push release cocoapod"
lane :release do
    release_version = sh("git describe").strip
    release_track = ""
    pod_name = "BitmovinAnalyticsCollector"
    COCOA_DEPLOY_REPO = "cocoapod-specs"

    if release_version.start_with?("2")
        release_track = "v2"
    else
        raise "Invalid release track: " + release_version
    end
    release_dir = '.release'

    spec = read_podspec(path: "./BitmovinAnalyticsCollector.v2.podspec")
    spec_output_name = "#{pod_name}.podspec.json"
    spec["version"] = release_version
    spec["source"]["tag"] = release_version

    # cocoapod_deploy_key_path="#{release_dir}/cocoapod-deploy.id_rsa"
    # Dir.chdir("..") do
    #   unless File.exists?(cocoapod_deploy_key_path)
    #     File.write(cocoapod_deploy_key_path, "-----BEGIN OPENSSH PRIVATE KEY-----\n") #Keys need to be created with macbook
    #     File.write(cocoapod_deploy_key_path, options[:COCOA_DEPLOY_KEY], mode: "a")
    #     File.write(cocoapod_deploy_key_path, "\n-----END OPENSSH PRIVATE KEY-----\n", mode: "a") #Keys need to be created with macbook
    #   end
    # end

    Dir.chdir("..") do
      Dir.mkdir(release_dir) unless File.exist?(release_dir)
      File.write("#{release_dir}/#{spec_output_name}",JSON.pretty_generate(spec))

      Dir.chdir(release_dir) do
        if Dir.exist?(COCOA_DEPLOY_REPO)
            puts "Cocoa deploy repo already exists"
        else
            puts "Cloning cocoa deploy repo"
            sh("git clone git@github.com:bitmovin/#{COCOA_DEPLOY_REPO}.git;")
        end
        Dir.chdir(COCOA_DEPLOY_REPO) do
            branch_name = "release/analytics-#{release_version}"
            sh("git pull;"\
                "git checkout #{branch_name} || git checkout -b #{branch_name};")
            repo_spec_output_path = "Specs/#{pod_name}/#{release_version}"
            FileUtils.mkdir_p(repo_spec_output_path) unless Dir.exist?(repo_spec_output_path)
            FileUtils.cp("../#{spec_output_name}", repo_spec_output_path)
            sh("git add .;"\
                "git commit -m \"#{pod_name} (#{release_version})\";"\
                "git push origin #{branch_name};"\
                "open https://github.com/bitmovin/#{COCOA_DEPLOY_REPO}/pull/new/#{CGI::escapeHTML(branch_name)}")
        end
        FileUtils.remove_dir(COCOA_DEPLOY_REPO)
      end
    #   sh("ssh-agent", "sh", "-c",
    #   sh(#"sh", "-c",
        # "chmod 0600 #{cocoapod_deploy_key_path};"\
        # "ssh-add #{cocoapod_deploy_key_path};"\
        # "git config --global user.name 'Bitmovin Release Automation';"\
        # "git config --global user.email support@bitmovin.com;"\
        # "bundle exec pod repo add bm-#{COCOA_DEPLOY_REPO} git@github.com:rolandgriesser/#{COCOA_DEPLOY_REPO}.git || bundle exec pod repo update bm-#{COCOA_DEPLOY_REPO};"\
        # "bundle exec pod repo push bm-#{COCOA_DEPLOY_REPO} #{spec_output_path} --allow-warnings --skip-import-validation --skip-tests")
    end

end

lane :build_collector do
  scan(
    scheme: "CollectorDemoApp",
    workspace: "BitmovinAnalyticsCollector.xcworkspace",
    sdk: "iphoneos",
    destination: "generic/platform=iOS",
    clean: true,
    build_for_testing: true,
    configuration: "Debug",
    xcargs: "CODE_SIGNING_ALLOWED='NO'"
  )
  scan(
    scheme: "CollectorDemoAppCocoaPods",
    workspace: "BitmovinAnalyticsCollector.xcworkspace",
    sdk: "iphoneos",
    destination: "generic/platform=iOS",
    clean: true,
    build_for_testing: true,
    configuration: "Debug",
    xcargs: "ENABLE_BITCODE='NO' CODE_SIGNING_ALLOWED='NO'"
  )
end

lane :build_collector_for_tv do
  scan(
    scheme: "CollectorDemoAppTV",
    workspace: "BitmovinAnalyticsCollector.xcworkspace",
    sdk: "appletvos",
    destination: "generic/platform=tvOS",
    clean: true,
    build_for_testing: true,
    configuration: "Debug",
    xcargs: "CODE_SIGNING_ALLOWED='NO'"
  )
  scan(
    scheme: "CollectorDemoAppTVCocoaPods",
    workspace: "BitmovinAnalyticsCollector.xcworkspace",
    sdk: "appletvos",
    destination: "generic/platform=tvOS",
    clean: true,
    build_for_testing: true,
    configuration: "Debug",
    xcargs: "CODE_SIGNING_ALLOWED='NO'"
  )
end

lane :test_collector do
  run_target_tests(target: "BitmovinAnalytics-Package")
end

private_lane :run_target_tests do |options|
  scan(
    scheme: options[:target],
    package_path: "./",
    destination: "name=iPhone 14",
    code_coverage: true,
    result_bundle: true,
    configuration: "Debug",
    xcargs: "CODE_SIGNING_ALLOWED='NO'"
  )
end
