# This file contains release related lanes

platform :ios do
  desc "build release for specific platform"
  private_lane :build_release_specific_platform do |options|
    scheme = options[:scheme]
    archive_path = "#{options[:output_dir]}/#{scheme}-#{options[:sdk]}.xcarchive"
    UI.header "Building #{scheme} for #{options[:sdk]}"

    xcodebuild(
      scheme: scheme,
      workspace: "BitmovinAnalyticsCollector.xcworkspace",
      clean: !is_ci,
      archive: true,
      archive_path: archive_path,
      xcargs: "-sdk #{options[:sdk]} -configuration Release SKIP_INSTALL=NO"
    )

    dsym_path = "#{archive_path}/dSYMs/#{scheme}.framework.dSYM"
    bcsymbolmap_path = %x[find #{archive_path}/BCSymbolMaps -type f -name *.bcsymbolmap 2> /dev/null || echo ""].strip

    {
        framework: "#{archive_path}/Products/Library/Frameworks/#{scheme}.framework",
        dsyms: dsym_path,
        bcsymbolmap: bcsymbolmap_path
    }
  end

  desc "release build tvOS and iOS"
  lane :build_release_product do |options|
    scheme = options[:scheme]
    supports_tvos = options[:supports_tvos]
    output_dir = "#{DirectoryHelper.project_root}/Output/#{scheme}"

    is_github_actions = ENV["GITHUB_ACTIONS"] || false
    if is_github_actions
      unlock_keychain(
        path: "~/Library/Keychains/login.keychain-db",
        password: ENV["KEYCHAIN_LOGIN_PASSWORD"],
        set_default: true
      )
    end

    FileUtils.remove_dir(output_dir, true)
    FileUtils.mkdir_p(output_dir)

    iOS_device_archive_info = build_release_specific_platform(
      output_dir: output_dir,
      scheme: scheme,
      sdk: "iphoneos"
    )
    iOS_simulator_archive_info = build_release_specific_platform(
      output_dir: output_dir,
      scheme: scheme,
      sdk: "iphonesimulator"
    )

    if supports_tvos
      tvOS_device_archive_info = build_release_specific_platform(
        output_dir: output_dir,
        scheme: scheme,
        sdk: "appletvos"
      )
      tvOS_simulator_archive_info = build_release_specific_platform(
        output_dir: output_dir,
        scheme: scheme,
        sdk: "appletvsimulator"
      )
    end

    def transform_to_options(archive_info)
      options = %{-framework #{archive_info[:framework]} -debug-symbols #{archive_info[:dsyms]}}
      options << " -debug-symbols #{archive_info[:bcsymbolmap]}" unless archive_info[:bcsymbolmap].empty?
      options
    end

    xcframework_command = "xcodebuild -create-xcframework \
      #{transform_to_options(iOS_device_archive_info)} \
      #{transform_to_options(iOS_simulator_archive_info)}"

    xcframework_command << " #{transform_to_options(tvOS_device_archive_info)}" if supports_tvos
    xcframework_command << " #{transform_to_options(tvOS_simulator_archive_info)}" if supports_tvos

    xcframework_command << " -output #{output_dir}/#{scheme}.xcframework"

    sh(xcframework_command)
  end

  desc "create zip out of individual xcframework"
  lane :create_release_xcframework_zip do |options|
    product_name = options[:product_name]
    product_path = "#{DirectoryHelper.project_root}/Output/#{product_name}/#{product_name}.xcframework"
    release_dir = "#{DirectoryHelper.project_root}/Release"

    FileUtils.mkdir_p(release_dir)
    Dir.chdir(release_dir) do
      FileUtils.remove_dir('temp', true)
      Dir.mkdir('temp')
      Dir.chdir('temp') do
        FileUtils.cp("#{DirectoryHelper.project_root}/podspec/BitmovinAnalyticsCollector.LICENSE.md", 'LICENSE.md')
        FileUtils.cp_r(product_path, '.')
        sh("zip -r #{release_dir}/#{product_name}.zip . -x '**/.DS_Store'")
      end
      FileUtils.remove_dir('temp', true)
    end
  end

  desc "create zip out of all xcframeworks"
  lane :create_release_umbrella_xcframework_zip do |options|
    product_path = "#{DirectoryHelper.project_root}/Output/*/*.xcframework"

    release_dir = "#{DirectoryHelper.project_root}/Release"
    FileUtils.mkdir_p(release_dir)
    Dir.chdir(release_dir) do
      Dir.mkdir('temp')
      Dir.chdir('temp') do
        FileUtils.cp("#{DirectoryHelper.project_root}/podspec/BitmovinAnalyticsCollector.LICENSE.md", 'LICENSE.md')
        sh("cp -R #{product_path} .")
        sh("zip -r #{release_dir}/BitmovinAnalyticsCollector.zip . -x '**/.DS_Store'")
      end
      FileUtils.remove_dir('temp', true)
    end
  end

  desc "push individual xcframework zip"
  lane :push_xcframework do |options|
    release_version = ENV.fetch("GIT_VERSION")
    product_name = options[:product_name]
    release_dir = "#{DirectoryHelper.project_root}/Release"

    gcs_key_path="#{release_dir}/gcs.json"
    File.write(gcs_key_path, ENV.fetch("GC_SACCOUNT")) unless File.exists?(gcs_key_path)

    bucket_name = "cloudflare-cdn-origin-bucket"
    bucket_path = "analytics/ios_tvos/#{release_version}/#{product_name}.zip"
    file_to_upload = "#{release_dir}/#{product_name}.zip"

    sh(
      %{gcloud auth activate-service-account --key-file=#{gcs_key_path}},
      %{gsutil cp -a public-read #{file_to_upload} gs://#{bucket_name}/#{bucket_path}}
    )
  end

  desc "push umbrella xcframework zip"
  lane :push_umbrella_xcframework do
    push_xcframework(
      product_name: "BitmovinAnalyticsCollector"
    )
  end
end