# This file contains Swift Package Manager support related lanes

platform :ios do
  desc "release SPM package"
  lane :release_spm_package do |options|
    package_version = options[:package_version] || ENV.fetch("GIT_VERSION")

    Dir.chdir("..") do
      if package_version.to_s.strip.empty?
        UI.error "Error: parameter `package_version` is empty!"
        exit(1)
      end

      release_dir = "#{Dir.pwd}/release"
      binary_path = "#{release_dir}/BitmovinPlayer.zip"
      unless File.exists?(binary_path)
        UI.error "'BitmovinPlayer.zip' was not found at: #{binary_path}"
        exit(1)
      end

      spm_deploy_key_path="#{release_dir}/spm-deploy.id_rsa"
      spm_deploy_key = options[:spm_deploy_key]
      SshHelper.ensure_ssh_key(
        key_path: spm_deploy_key_path,
        ssh_key: spm_deploy_key
      )

      tmp_dir = "#{release_dir}/SPM"
      sh("rm -rf #{tmp_dir}")
      Dir.mkdir(tmp_dir) unless File.exists?(tmp_dir)

      # TODO update repo URL when moving to public org
      spm_repo_url = "git@github.com:bitmovin/player-ios.git"
      GitHelper.clone(
        repo_url: spm_repo_url,
        ssh_key_path: spm_deploy_key_path,
        destination_path: tmp_dir
      )

      package_manifest_template_path = "#{Dir.pwd}/spm/Package.swift"

      Dir.chdir("#{tmp_dir}") do
        GitHelper.config_user(
          name: "Bitmovin Release Automation",
          email: "support@bitmovin.com"
        )

        checksum = SpmHelper.calculate_checksum(binary_path)

        SpmHelper.update_package_swift(
          package_manifest_template_path: package_manifest_template_path,
          package_version: package_version,
          checksum: checksum
        )

        SpmHelper.update_readme(
          package_version: package_version
        )

        GitHelper.add_files(
          [
            "Package.swift",
            "README.md"
          ]
        )
        GitHelper.commit("Release #{package_version}")
        GitHelper.tag(tag: package_version, message: "Release #{package_version}")
        GitHelper.push(spm_deploy_key_path)
        GitHelper.push_tags(spm_deploy_key_path)
      end
    end
  end
end
